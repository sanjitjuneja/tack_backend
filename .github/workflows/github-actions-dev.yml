name: Deploy to Amazon ECS

on:
  push:
    branches:
      - develop

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}                  # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}           # set this to your Amazon ECR repository name
  ECR_REPOSITORY_NGINX : ${{ secrets.ECR_REPOSITORY_NGINX }}
  ECS_SERVICE: ecs-backend-tackapp                 # set this to your Amazon ECS service name
  ECS_CLUSTER: backend-tackapp-develop                # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: tackapp/aws/tackapp_task_definition.json # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME_WEB: web           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition
  CONTAINER_NAME_CELERY: celery
  CONTAINER_NAME_CELERY_BEAT: celery-beat
  CONTAINER_NAME_NGINX: nginx

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@13d241b293754004c80624b5567555c4a39ffbe3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@aaf69d68aa3fb14c1d5a6be9ac61fe15b48453a2

      - name: Build, tag, and push web image to Amazon ECR
        id: build-image-web
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Build, tag, and push nginx image to Amazon ECR
        id: build-image-nginx
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          # Build a docker container and
          # push it to ECR so that it can
          # be deployed to ECS.
          cd nginx
          docker build -t $ECR_REPOSITORY_NGINX:$IMAGE_TAG .
          docker push $ECR_REPOSITORY_NGINX:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REPOSITORY_NGINX:$IMAGE_TAG"

      - name: Fill in the new web image ID in the Amazon ECS task definition
        id: task-web
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME_WEB }}
          image: ${{ steps.build-image-web.outputs.image }}

      - name: Fill in the new celery image ID in the Amazon ECS task definition
        id: task-celery
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.task-web.outputs.task-definition }}
          container-name: ${{ env.CONTAINER_NAME_CELERY }}
          image: ${{ steps.build-image-web.outputs.image }}

      - name: Fill in the new celery-beat image ID in the Amazon ECS task definition
        id: task-celery-beat
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.task-web.outputs.task-definition }}
          container-name: ${{ env.CONTAINER_NAME_CELERY_BEAT }}
          image: ${{ steps.build-image-web.outputs.image }}

      - name: Fill in the new nginx image ID in the Amazon ECS task definition
        id: task-nginx
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.task-celery.outputs.task-definition }}
          container-name: ${{ env.CONTAINER_NAME_NGINX }}
          image: ${{ steps.build-image-nginx.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-nginx.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          force-new-deployment: true
          wait-for-service-stability: true
